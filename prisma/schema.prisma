generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int         @id @default(autoincrement())
  createdAt      DateTime    @default(now()) @db.Timestamptz()
  updatedAt      DateTime    @updatedAt @db.Timestamptz()
  email          String      @unique @db.VarChar(256)
  hash           String      @db.VarChar(512)
  firstName      String?     @db.VarChar(256)
  lastName       String?     @db.VarChar(256)
  currentBalance Decimal     @default(2000) @db.Decimal(10, 2)
  initialBalance Decimal     @default(2000) @db.Decimal(10, 2)
  role           RoleEnum    @default(USER)
  expenses       Expense[]
  AccessKey      AccessKey[]
  Order          Order[]

  @@map("user")
}

model Expense {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @db.Timestamptz()
  updatedAt   DateTime @updatedAt @db.Timestamptz()
  title       String
  description String?
  date        DateTime @db.Timestamptz()
  userId      Int
  amount      Decimal  @db.Decimal(10, 2)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("expense")
}

enum RoleEnum {
  USER
  ADMIN
}

model AccessKey {
  id        Int              @id @default(autoincrement())
  name      String           @db.VarChar(128)
  key       String           @db.VarChar(256)
  secret    String           @db.VarChar(256)
  exchange  ExchangeNameEnum @default(KRAKEN)
  isDeleted Boolean          @default(false)
  createdAt DateTime         @default(now()) @db.Timestamptz()
  updatedAt DateTime         @updatedAt @db.Timestamptz()

  userId Int
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Order  Order[]

  @@map("access_key")
}

enum ExchangeNameEnum {
  BITSTAMP
  KRAKEN
}

model Order {
  id        Int                @id @default(autoincrement())
  orderId   String?            @unique() @db.VarChar(256)
  timestamp BigInt
  datetime  DateTime           @db.Timestamptz()
  status    OrderStatusEnum    @default(CLOSED)
  symbol    String             @db.VarChar(16)
  base      String             @db.VarChar(8)
  quote     String             @db.VarChar(8)
  type      OrderTypeEnum      @default(MARKET)
  side      OrderSideEnum      @default(BUY)
  price     Decimal            @db.Decimal(20, 8)
  // actual order amount filled
  filled    Decimal            @db.Decimal(20, 8)
  // filled * price
  cost      Decimal            @db.Decimal(20, 8)
  fee       Decimal            @db.Decimal(16, 8)
  currency  String             @db.VarChar(8)
  createdBy OrderCreatedByEnum @default(USER)
  rawData   Json?
  createdAt DateTime           @default(now()) @db.Timestamptz()
  updatedAt DateTime           @updatedAt @db.Timestamptz()

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  accessKeyId Int?
  accessKey   AccessKey? @relation(fields: [accessKeyId], references: [id], onDelete: Cascade)

  @@index([datetime])
  @@index([timestamp])
  @@map("order")
}

enum OrderCreatedByEnum {
  USER
  SCRIPT
}

enum OrderStatusEnum {
  PENDING
  OPEN
  CLOSED
  CANCELED
  EXPIRED
}

enum OrderTypeEnum {
  LIMIT
  MARKET
}

enum OrderSideEnum {
  BUY
  SELL
}
