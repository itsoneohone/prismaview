generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int         @id @default(autoincrement())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  email          String      @unique
  hash           String
  firstName      String?
  lastName       String?
  currentBalance Decimal     @default(2000) @db.Decimal(10, 2)
  initialBalance Decimal     @default(2000) @db.Decimal(10, 2)
  role           Role        @default(USER)
  expenses       Expense[]
  AccessKey      AccessKey[]
  Order          Order[]

  @@map("user")
}

model Expense {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  date        DateTime
  userId      Int
  amount      Decimal  @db.Decimal(10, 2)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("expense")
}

enum Role {
  USER
  ADMIN
}

model AccessKey {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(128)
  key       String   @db.VarChar(256)
  secret    String   @db.VarChar(256)
  exchange  Exchange
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Order  Order[]

  @@map("access_key")
}

enum Exchange {
  BITSTAMP
  KRAKEN
}

model Order {
  id        Int            @id @default(autoincrement())
  orderId   String?
  timestamp BigInt
  datetime  DateTime
  status    OrderStatus
  symbol    String
  type      OrderType
  side      OrderSide
  price     Decimal        @db.Decimal(20, 8)
  // actual order amount filled
  filled    Decimal        @db.Decimal(20, 8)
  // filled * price
  cost      Decimal        @db.Decimal(20, 8)
  fee       Decimal        @db.Decimal(16, 8)
  currency  OrderCurrency
  createdBy OrderCreatedBy @default(USER)
  rawData   Json?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  accessKeyId Int?
  accessKey   AccessKey? @relation(fields: [accessKeyId], references: [id], onDelete: Cascade)

  @@map("order")
}

enum OrderCreatedBy {
  USER
  SCRIPT
}

enum OrderCurrency {
  EUR
  GBP
  USD
}

enum OrderStatus {
  PENDING
  OPEN
  CLOSED
  CANCELED
  EXPIRED
}

enum OrderType {
  LIMIT
  MARKET
}

enum OrderSide {
  BUY
  SELL
}
